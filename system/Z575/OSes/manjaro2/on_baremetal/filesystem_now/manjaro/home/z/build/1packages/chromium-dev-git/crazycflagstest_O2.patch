diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index 47a732b..798cf32 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -191,13 +191,13 @@ config("compiler") {
     } else if (is_posix && !is_chromeos && !is_nacl) {
       # TODO(phajdan.jr): Use -fstack-protector-strong when our gcc supports it.
       # See also https://crbug.com/533294
-      cflags += [ "--param=ssp-buffer-size=4" ]
+      #cflags += [ "--param=ssp-buffer-size=4" ]
 
       # The x86 toolchain currently has problems with stack-protector.
       if (is_android && current_cpu == "x86") {
         cflags += [ "-fno-stack-protector" ]
       } else {
-        cflags += [ "-fstack-protector" ]
+        #cflags += [ "-fstack-protector" ]
       }
     }
 
@@ -272,7 +272,17 @@ config("compiler") {
   # ---------------------------------
   if (is_linux || is_android) {
     cflags += [
-      "-fPIC",
+      "-fPIC", #/usr/bin/ld: obj/third_party/angle/libtranslator_lib.a(RecordConstantPrecision.o): relocation R_X86_64_32S against `.rodata._ZTVN12_GLOBAL__N_132RecordConstantPrecisionTraverserE' can not be used when making a shared object; recompile with -fPIC
+#      "-mtune=native",#remove this because it might map native to i486 or god knows what! just like for -march=native below!
+      "-fomit-frame-pointer",
+
+      #"-fno-fast-math", #this must be after -Ofast or it has no effect!
+      #../../../home/z/build/1packages/chromium-dev-git/fetch_gclient_base/checkout_root/src/third_party/opus/src/celt/arch.h:166:2: error: Cannot build libopus with -ffast-math unless FLOAT_APPROX is defined. This could result in crashes on extreme (e.g. NaN) input
+      #"-DFLOAT_APPROX",
+      #../../../home/z/build/1packages/chromium-dev-git/fetch_gclient_base/checkout_root/src/third_party/sqlite/amalgamation/sqlite3.c:25127:3: error: SQLite will not work correctly with the -ffast-math option of GCC.
+
+      #"-fno-schedule-insns2", #not supported because clang
+      #"-fno-delete-null-pointer-checks",#not supported because clang
       "-pipe",  # Use pipes for communicating between sub-processes. Faster.
     ]
 
@@ -443,6 +453,7 @@ config("compiler") {
   # TODO(pcc): Make this conditional on is_official_build rather than on gn
   # flags for specific features.
   if (!is_debug && (allow_posix_link_time_opt || is_cfi) && !is_nacl) {
+    #XXX don't use allow_posix_link_time_opt because compile errors(see in args.gn)
     cflags += [ "-flto" ]
     ldflags += [ "-flto" ]
 
@@ -502,7 +513,8 @@ config("compiler_cpu_abi") {
     if (current_cpu == "x64") {
       cflags += [
         "-m64",
-        "-march=x86-64",
+        "-march=x86-64", #this is good also because I can then use it on the T400
+        #"-march=native", #error: unknown target CPU 'i486'
       ]
       ldflags += [ "-m64" ]
     } else if (current_cpu == "x86") {
@@ -1053,14 +1065,15 @@ config("chromium_code") {
   if (is_win) {
     cflags = [ "/W4" ]  # Warning level 4.
   } else {
-    cflags = [ "-Wall" ]
-    if (treat_warnings_as_errors) {
-      cflags += [ "-Werror" ]
-    }
-    if (is_clang) {
-      # Enable -Wextra for chromium_code when we control the compiler.
-      cflags += [ "-Wextra" ]
-    }
+#    cflags = [ "-Wall" ]
+    cflags = [ ]
+#    if (treat_warnings_as_errors) {
+#      cflags += [ "-Werror" ]
+#    }
+#    if (is_clang) {
+#      # Enable -Wextra for chromium_code when we control the compiler.
+#      cflags += [ "-Wextra" ]
+#    }
 
     # In Chromium code, we define __STDC_foo_MACROS in order to get the
     # C99 macros on Mac and Linux.
@@ -1115,11 +1128,11 @@ config("no_chromium_code") {
     if (treat_warnings_as_errors && is_clang) {
       cflags += [ "-Werror" ]
     }
-    if (is_clang && !is_nacl) {
-      # TODO(thakis): Remove !is_nacl once
-      # https://codereview.webrtc.org/1552863002/ made its way into chromium.
-      cflags += [ "-Wall" ]
-    }
+#    if (is_clang && !is_nacl) {
+#      # TODO(thakis): Remove !is_nacl once
+#      # https://codereview.webrtc.org/1552863002/ made its way into chromium.
+#      cflags += [ "-Wall" ]
+#    }
   }
 
   if (is_clang) {
@@ -1348,7 +1361,7 @@ config("optimize") {
     # Favor size over speed.
     cflags = [ "-Os" ] + common_optimize_on_cflags
   } else {
-    cflags = [ "-O2" ] + common_optimize_on_cflags
+    cflags = [ "-O2", "-fno-fast-math" ] + common_optimize_on_cflags
   }
   ldflags = common_optimize_on_ldflags
 }
@@ -1363,7 +1376,7 @@ config("optimize_no_wpo") {
     # Favor size over speed.
     cflags = [ "-Os" ] + common_optimize_on_cflags
   } else {
-    cflags = [ "-O2" ] + common_optimize_on_cflags
+    cflags = [ "2-Ofast2" ] + common_optimize_on_cflags
   }
   ldflags = common_optimize_on_ldflags
 }
@@ -1427,7 +1440,7 @@ config("optimize_max") {
         ]
       }
     } else {
-      cflags = [ "-O2" ] + common_optimize_on_cflags
+      cflags = [ "-O2", "-fno-fast-math" ] + common_optimize_on_cflags
     }
   }
 }
@@ -1470,7 +1483,8 @@ config("optimize_speed") {
         ]
       }
     } else {
-      cflags = [ "-O3" ] + common_optimize_on_cflags
+      cflags = [ "-O2", "-fno-fast-math" ] + common_optimize_on_cflags
+      #used for llvm within. was: -O3
     }
   }
 }
