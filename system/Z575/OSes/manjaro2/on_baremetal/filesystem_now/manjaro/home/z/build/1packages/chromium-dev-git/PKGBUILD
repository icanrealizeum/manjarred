# Maintainer: Gustavo Alvarez <sl1pkn07@gmail.com>
# Contributor: Mikhail Vorozhtsov <mikhail.vorozhtsov@gmail.com>
# Contributor: Nagisa <simonas@kazlauskas.me>
# Contributor: Misc <andreas.reis@gmail.com>
# Contributor: Jeagoss <jgoliver@jeago.com>
# Contributor: Saikrishna Arcot <saiarcot895@gmail.com> (Author of https://github.com/saiarcot895/chromium-ubuntu-build/blob/master/debian/patches/enable_vaapi_on_linux.diff)

#########################
## -- Build options -- ##
#########################

#XXX: will always use system clang!(not bundled, and not gcc!)
#_use_clang=1           # Use clang compiler (system). Results in faster build and smaller chromium.
#_use_bundled_clang=0   # Use bundled clang compiler (needs build). NOTE: if use this option , '_use_clang' need set to 1
_use_ccache=1          # Use ccache when build
_use_pax=0             # Set 1 to change PaX permisions in executables NOTE: only use if use PaX environment
_use_gtk3=1            # If set 1, then build with GTK3 support, if set 0, then build with GTK2
inTMPFS=1 # 1 means compile in /tmp (assumed u have enough ram and it's tmpfs)


##############################################
## -- Package and components information -- ##
##############################################
pkgname=chromium-dev
pkgver=54.0.2800.0_r5.8429df4
_launcher_ver=5
pkgrel=1
pkgdesc="The open-source project behind Google Chrome Dev Channel"
arch=('i686' 'x86_64')
url='http://www.chromium.org'
license=('BSD')
depends=('desktop-file-utils'
         #'icu'
         'jsoncpp'
         #'libsrtp'
         'libwebp'
         'libxslt'
         'libxss'
         'minizip'
         'perl-file-basedir'
         'nss'
         'pciutils'
         #'re2'
         'snappy'
         'speech-dispatcher'
         'speex'
         'xdg-utils'
         #'opus'
         #'protobuf'
         #'libevent'
         'libvpx'
         'ffmpeg'
         )
makedepends=('libexif'
             'elfutils'
             'gperf'
             'ninja'
             'perl-json'
             'python2-beautifulsoup4'
             'python2-html5lib'
             'python2-simplejson'
             'python2-jinja'
             'python2-ply'
             'subversion'
             'yasm'
             'git'
             'imagemagick'

#me
'depot-tools-git'

             #src: https://chromium.googlesource.com/chromium/src/+/master/docs/linux_build_instructions.md#Arch-Linux
             'python'
             'perl'
             'gcc'
             'gcc-libs'
             'bison'
             'flex'
             'gperf'
             'pkgconfig'
             'nss'
             'alsa-lib'
             'gconf'
             'glib2'
             'gtk2'
             'nspr'
#             'ttf-ms-fonts' #it's there on AUR only!
             'freetype2'
             'cairo'
             'dbus'
             'libgnome-keyring'

             )
optdepends=(
####'chromium-pepper-flash-dev: PPAPI Flash Player Dev Channel 64bits only'
            'chromium-widevine-dev: Widevine plugin eg: Netflix Dev Channel 64bits only'
            #
            'kdebase-kdialog: Needed for file dialogs in KDE4/KF5'
            'kdialog-frameworks-git: Needed for file dialogs in KF5'
            #
            'kwalletmanager: Needed for storing passwords in KWallet in KF5'
            #
            'libexif: Need for read EXIF metadata'
            'ttf-font: For some typography'
            )
conflicts=('chromedriver' 'chromium')

allpatches=(
#0200_no_warnings_as_errors.patch
#0300_use_system_clang.patch
#0500_message_center_disabled.patch
#0600_fix_AutofillDialogController.patch
##0800_small_fixes.patch
#0900_autofill_disabled.patch
#1000_pepper_compile_error.patch
#1100_plugins_disabled.patch
#1200_signin_fix.patch
#1300_background_fix.patch
##1400_hotword_disabled.patch
#1400_make_linking_work.patch
no_sysroot.patch
desktop_capture_controller_fail.patch
)

source=(
#####"https://commondatastorage.googleapis.com/chromium-browser-official/chromium-${pkgver}.tar.xz"
        "chromium-launcher-${_launcher_ver}.tar.gz::https://github.com/icanrealizeum/chromium-launcher/archive/v${_launcher_ver}.tar.gz"
        'chromium-dev.svg'
        # Patch form Gentoo
        'https://raw.githubusercontent.com/gentoo/gentoo/master/www-client/chromium/files/chromium-system-ffmpeg-r2.patch'
        'https://raw.githubusercontent.com/gentoo/gentoo/master/www-client/chromium/files/chromium-system-jinja-r11.patch'
        'https://raw.githubusercontent.com/gentoo/gentoo/master/www-client/chromium/files/chromium-system-zlib-r0.patch'
##it is changed        'https://raw.githubusercontent.com/gentoo/gentoo/master/www-client/chromium/files/chromium-linker-warnings-r0.patch'
        # Misc Patches
        'enable_vaapi_on_linux.diff' ###'https://raw.githubusercontent.com/saiarcot895/chromium-ubuntu-build/master/debian/patches/enable_vaapi_on_linux.diff'
        'minizip.patch::http://pastebin.com/raw/QCqSDam5'
        # Patch from crbug (chromium bugtracker)
        'chromium-widevine-r1.patch' # https://crbug.com/473866

        #own patches
        "${allpatches[@]}"
        )

##"$(curl -sL https://gsdview.appspot.com/chromium-browser-official/?marker=chromium-${pkgver}.tar.xz.hashes | awk -v FS='<td>"' -v RS='"</td>' '$0=$2' | head -n1)"
#          "$(curl -sL https://commondatastorage.googleapis.com/chromium-browser-official/chromium-${pkgver}.tar.xz.hashes | grep sha1 | cut -d " " -f3)"
sha512sums=('f3480752413ac722d4b70f8ae637303b3b958e27677c482dc75be8a52285c1aa4db1ce670faefd460308548f2d861a935c12c8de24284edad58902cc89aac4a5'
            'e13f13871cbbaf76dfdbd3c89619116d1264805562bffcef46380d59bd54483267a4c917bb4b8423cedd0e0ce96f15d5b3768eb533d8ec12fb825eda192c4042'
            'bd662718e65d72854018d7d9e20be0196057de69be87e2ef18e1a8c98b2ddaccbdb074377820b31e6797d9370aa68724fabf26d826a402595390730857cc3956'
            '008a3fa78dc09493f98bc1d5f615fbf261c055a824f1edd920b775b4d87992120a1c27111c8d5e4a1b335b16c83066c01d22e4ac5b91b2d39f811aa9b0605c00'
            'ea7b9da8bf504583e0753ed2d69e95e6d2579bb9640b52b9d575966f495bd4dc15ec94fb35ad9877a736dceed946a38dccac028a4130326fda3f7ad7dfb3b07c'
            '6b39d8a1dc048f583d06339739cbcf8e48a078d31e3eac478800e890ef78a28e5fcf282fb6533c984cfdddacbb1dcbe6d679349bc5d52d3f93730fa14bc77f3b'
            '2108a3d40cef30de917af30945783da3b095cefac18ce7a37e9c6d184ede152dbc1671fa9fc89a1f183ab8b4b13f3237ec7834837a9c63a39ff31b26215f2320'
            '425466860efd72c9bd611dcd54531af1394a2cba069d843f7e7accda240450effa09026ead94811c7c45db990696b54ea464c3811980e587a35473d6fa171953'
            '49534af6e37343732be13d6b704b81f77cdf6cba631b75514cacca795d244c4fbf960ddd634cbcb72f5f6c05af978d3515e2865d4eaf04a990bb6dfe098f550c'
            'b7072b646a56648efd802668070280c550cd0d1d0d3b709c264e877b33c4d45ef38a92386962ea3442b414e63628b7be1880ad82f3bc75d1b2a20c9260b6595a')
options=('!strip')
install=chromium-dev.install
_folder="${startdir}/fetch_gclient_base/checkout_root"
_srcfolder="${_folder}/src"

_reldir="out/Default"
if test "$inTMPFS" = "1"; then
  _reldir="/tmp/${_reldir}"
fi

################################################
## -- Don't touch anything below this line -- ##
################################################

# Google API keys (see http://www.chromium.org/developers/how-tos/api-keys)
# NOTE: These are for Arch Linux use ONLY. For your own distribution, please
# get your own set of keys. Feel free to contact foutrelis@archlinux.org for
# more information.
_google_api_key="AIzaSyDwr302FpOSkGRpLlUpPThNTDPbXcIn_FM"
_google_default_client_id="413772536636.apps.googleusercontent.com"
_google_default_client_secret="0ZChLK6AxeA3Isu96MkwqDR4"

# 32 or 64 bits?
if [ "${CARCH}" = "i686" ]; then
  _target_arch=ia32
  _build_pnacl=0
  _pnacl_arch=32
elif  [ "${CARCH}" = "x86_64" ]; then
  _target_arch=x64
  _build_pnacl=0  #xchanged
  _pnacl_arch=64
fi

# If use PaX environment, need 'paxctl'
if [ "${_use_pax}" = "1" ]; then
  makedepends+=('paxctl')
fi

# Need you use clang?
#if [ "${_use_clang}" = "1" ]; then
  makedepends+=('clang')
#fi
if [ "${_use_bundled_clang}" = "1" ]; then
  makedepends+=('cmake'
                'ocaml'
                'libffi'
                'chrpath'
                )
fi

# Build with GTK3?
if [ "${_use_gtk3}" = "1" ]; then
  depends+=('gtk3')
   makedepends+=('gtk2')
  _launcher_gtk='GTK=3'
  optdepends+=('libappindicator-gtk3: Needed for show systray icon in the panel in plasma-next (KF5)')
elif [ "${_use_gtk3}" = "0" ]; then
  depends+=('gtk2')
  optdepends+=('libappindicator-gtk2: Needed for show systray icon in the panel in plasma-next (KF5)')
fi

# Need you use ccache?
if [ "${_use_ccache}" = "1" ]; then
  makedepends+=('ccache')
fi

#FIXME: remove the following GYP(not GN) build stuff
cat >/dev/null <<EOF
# Are we in Gnome?
_use_gnome=0
if [ -f /usr/lib/libgconf-2.so ]; then
  depends+=('gconf')
  _use_gnome=1
fi

# Are you use gnome-keyring?
_use_gnome_keyring=0
if [ -f /usr/lib/libgnome-keyring.so ]; then
  depends+=('libgnome-keyring'
            'gnome-keyring')
  _use_gnome_keyring=1
fi

# Are you use Pulseaudio?
_use_pulseaudio=0
if [ -x /usr/lib/libpulse.so ]; then
  depends+=('libpulse')
  _use_pulseaudio=1
fi

# List of third-party components needed for build chromium. The rest is remove by remove_bundled_libraries srcipt in prepare()
_necesary=('base/third_party/dmg_fp'
           'base/third_party/dynamic_annotations'
           'base/third_party/icu'
           'base/third_party/libevent'
           'base/third_party/nspr'
           'base/third_party/superfasthash'
           'base/third_party/symbolize'
           'base/third_party/valgrind'
           'base/third_party/xdg_mime'
           'base/third_party/xdg_user_dirs'
           'breakpad/src/third_party/curl'
           'chrome/third_party/mozilla_security_manager'
           'courgette/third_party'
           'native_client/src/third_party/dlmalloc'
           'native_client_sdk/src/libraries/third_party/newlib-extras'
           'net/third_party/mozilla_security_manager'
           'net/third_party/nss'
           'third_party/WebKit'
           'third_party/analytics'
           'third_party/angle'
           'third_party/angle/src/common/third_party/numerics'
           'third_party/angle/src/third_party/compiler'
           'third_party/angle/src/third_party/murmurhash'
           'third_party/angle/src/third_party/trace_event'
           'third_party/angle/src/third_party/libXNVCtrl'
           'third_party/brotli'
           'third_party/boringssl'
           'third_party/cacheinvalidation'
           'third_party/catapult'
           'third_party/catapult/third_party/py_vulcanize'
           'third_party/catapult/third_party/py_vulcanize/third_party/rcssmin'
           'third_party/catapult/third_party/py_vulcanize/third_party/rjsmin'
           'third_party/catapult/tracing/third_party/components/polymer'
           'third_party/catapult/tracing/third_party/d3'
           'third_party/catapult/tracing/third_party/gl-matrix'
           'third_party/catapult/tracing/third_party/jszip'
           'third_party/cld_2'
           'third_party/cros_system_api'
           'third_party/cython/python_flags.py'
           'third_party/devscripts'
           'third_party/dom_distiller_js'
           'third_party/dom_distiller_js/dist/proto_gen/third_party/dom_distiller_js'
           'third_party/ffmpeg' # http://crbug.com/588423
           'third_party/fips181'
           'third_party/flot'
           'third_party/google_input_tools'
           'third_party/google_input_tools/third_party/closure_library'
           'third_party/google_input_tools/third_party/closure_library/third_party/closure'
           'third_party/hunspell'
           'third_party/iccjpeg'
           'third_party/icu' # https://crbug.com/584920 and https://crbug.com/592268
           'third_party/jstemplate'
           'third_party/khronos'
           'third_party/leveldatabase'
           'third_party/libaddressinput'
           'third_party/libjingle'
           'third_party/libjpeg_turbo'
           'third_party/libphonenumber'
           'third_party/libpng'
           'third_party/libsecret'
           'third_party/libsrtp'
           'third_party/libudev'
           'third_party/libusb'
           'third_party/libva'
           'third_party/libxml/chromium'
           'third_party/libwebm'
           'third_party/libXNVCtrl'
           'third_party/libyuv'
           'third_party/lss'
           'third_party/lzma_sdk'
           'third_party/mesa'
           'third_party/modp_b64'
           'third_party/mt19937ar'
           'third_party/openh264' # http://crbug.com/588423 (?)
           'third_party/openmax_dl'
           'third_party/opus'
           'third_party/ots'
           'third_party/pdfium'
           'third_party/pdfium/third_party/agg23'
           'third_party/pdfium/third_party/base'
           'third_party/pdfium/third_party/bigint'
           'third_party/pdfium/third_party/freetype'
           'third_party/pdfium/third_party/lcms2-2.6'
           'third_party/pdfium/third_party/libjpeg'
           'third_party/pdfium/third_party/libopenjpeg20'
           'third_party/pdfium/third_party/libpng16'
           'third_party/pdfium/third_party/libtiff'
           'third_party/pdfium/third_party/zlib_v128'
           'third_party/polymer'
           'third_party/protobuf'
           'third_party/protobuf/third_party/six'
           'third_party/qcms'
           'third_party/re2'
           'third_party/sfntly'
           'third_party/skia'
           'third_party/smhasher'
           'third_party/sqlite'
           'third_party/tcmalloc'
           'third_party/usrsctp'
           'third_party/web-animations-js'
           'third_party/webdriver'
           'third_party/webrtc'
           'third_party/widevine'
           'third_party/woff2'
           'third_party/x86inc'
           'third_party/zlib/google'
           'url/third_party/mozilla'
           'v8/src/third_party/fdlibm'
           'v8/src/third_party/valgrind'
           )

# Set build flags
# NOTE
# -Denable_sql_database=0                    | http://crbug.com/22208
# -Dlogging_like_official_build=1            | Save space by removing DLOG and DCHECK messages (about 6% reduction).
# -Dlinux_use_gold_flags=0                   | Never use bundled gold binary. Disable gold linker flags for now.
# -Dusb_ids_path=/usr/share/hwdata/usb.ids   | Use the file at run time instead of effectively compiling it in.
# -Dicu_use_data_file_flag=1                 | set to 0 when fix https://crbug.com/592268

_flags=("-Dclang=${_use_clang}"
        '-Ddisable_glibc=1'
        '-Ddisable_fatal_linker_warnings=1'
        '-Denable_sql_database=0'
        '-Denable_touch_ui=1'
        '-Denable_webrtc=1'
        '-Denable_widevine=1'
        '-Denable_pepper_cdms=1'
        '-Denable_hangout_services_extension=1'
        '-Dffmpeg_branding=ChromeOS'
        "-Dgoogle_api_key=${_google_api_key}"
        "-Dgoogle_default_client_id=${_google_default_client_id}"
        "-Dgoogle_default_client_secret=${_google_default_client_secret}"
        '-Dicu_use_data_file_flag=1'
        '-Dlibspeechd_h_prefix=speech-dispatcher/'
        "-Dlinux_link_gnome_keyring=${_use_gnome_keyring}"
        "-Dlinux_link_gsettings=${_use_gnome}"
        '-Dlinux_link_kerberos=1'
        '-Dlinux_link_libbrlapi=1'
        '-Dlinux_link_libpci=1'
        '-Dlinux_link_libspeechd=1'
        "-Dlinux_link_pulseaudio=${_use_pulseaudio}"
        '-Dlinux_strip_binary=1'
        '-Dlinux_use_bundled_binutils=0'
        '-Dlinux_use_bundled_gold=0'
        '-Dlinux_use_gold_flags=0'
        '-Dlogging_like_official_build=1'
        '-Dno_strict_aliasing=1'
        '-Dproprietary_codecs=1'
        '-Dpython_ver=2.7'
        '-Dremove_webcore_debug_symbols=1'
        "-Dtarget_arch=${_target_arch}"
        '-Dusb_ids_path=/usr/share/hwdata/usb.ids'
        "-Duse_gconf=${_use_gnome}"
        "-Duse_gio=${_use_gnome}"
        "-Duse_gnome_keyring=${_use_gnome_keyring}"
        "-Duse_gtk3=${_use_gtk3}"
        "-Duse_pulseaudio=${_use_pulseaudio}"
        '-Duse_sysroot=0'
        '-Duse_xkbcommon=1'
        '-Dwerror='
        )

# Set pnacl flags
if [ "${_build_pnacl}" = "0" ]; then
  _flags+=('-Ddisable_nacl=1'
           '-Ddisable_pnacl=1'
           )
fi

# Set clang flags
if [ "${_use_clang}" = "1" ]; then
  if [ "${_use_bundled_clang}" = "0" ]; then
    _flags+=('-Dclang_use_chrome_plugins=0'
             '-Dhost_clang=0'
             )
  elif [ "${_use_bundled_clang}" = "1" ]; then
    _flags+=('-Dclang_use_chrome_plugins=1'
             '-Dhost_clang=1'
             )
  fi
fi

# Set the bundled/external components
# TODO
# -Duse_system_hunspell=1    | Upstream changes needed
# -Duse_system_libusb=1      | https://crbug.com/266149
# -Duse_system_opus=1        | https://code.google.com/p/webrtc/issues/detail?id=3077
# -Duse_system_sqlite=1      | https://crbug.com/22208
# -Duse_system_ssl=1         | https://crbug.com/58087
# -Duse_system_libsrtp=1     | https://crbug.com/501318
# -Duse_system_re2=1         | https://bugs.gentoo.org/show_bug.cgi?id=571156
# -Duse_system_protobuf=1    | https://bugs.gentoo.org/show_bug.cgi?id=525560
# -Duse_system_icu=1         | https://crbug.com/584920 and https://crbug.com/592268
# -Duse_system_libpng=1      | https://crbug.com/595429
# -Duse_system_libjpeg=1     | https://bugs.gentoo.org/show_bug.cgi?id=584518
# NOTE
# -Duse_system_openssl=0     | Set to 1 if use BoringSSL instead of SSL
# -Duse_system_libevent=0    | Need older version (<2.x.x)
# -Duse_system_v8=0          | Possible broken in API/ABI if use a differen version
# -Duse_system_libxnvctrl=0  | Because not exist in Arch (and not all users use nvidia blob drivers)
_use_system=('-Duse_system_expat=1'
             '-Duse_system_ffmpeg=1'
             '-Duse_system_flac=1'
             '-Duse_system_fontconfig=1'
             '-Duse_system_harfbuzz=1'
             '-Duse_system_icu=0'
             '-Duse_system_jsoncpp=1'
             '-Duse_system_libevent=0'
             '-Duse_system_libexif=1'
             '-Duse_system_libjpeg=0'
             '-Duse_system_libpng=0'
             '-Duse_system_libsrtp=0'
             '-Duse_system_libusb=0'
             '-Duse_system_libvpx=1'
             '-Duse_system_libwebp=1'
             '-Duse_system_libxml=1'
             '-Duse_system_libxnvctrl=0'
             '-Duse_system_libxslt=1'
             '-Duse_system_minizip=1'
             '-Duse_system_nspr=1'
             '-Duse_system_openssl=0'
             '-Duse_system_opus=0'
             '-Duse_system_protobuf=0'
             '-Duse_system_re2=0'
             '-Duse_system_snappy=1'
             '-Duse_system_speex=1'
             '-Duse_system_sqlite=0'
             '-Duse_system_ssl=0'
             '-Duse_system_v8=0'
             '-Duse_system_yasm=1'
             '-Duse_system_xdg_utils=1'
             '-Duse_system_zlib=1'
             )
EOF

################################################
getchromiumver() {
    pushd -- "${_srcfolder}" >/dev/null 2>&1
    export PATH="${srcdir}/python-path:$PATH"
    build/util/version.py -f chrome/VERSION -t "@MAJOR@.@MINOR@.@BUILD@.@PATCH@"
    #FIXME: allow tag --list first and if empty, do the version.py - if the latter fails pkgver won't be changed apparently; that's good because it will have to fail until version.py gets downloaded
    # tags dont exit with --nohistory: git tag --list --sort="-v:refname" | head -1
    popd -- >/dev/null 2>&1
}

pkgver() {
    cd "${_srcfolder}"
    printf "%s_r%s.%s" "$(getchromiumver)" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
    printf "%s_r%s.%s" "$(getchromiumver)" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)" >&2
}

removestuff() {
#use like this removestuff <<EOF
#file1
#folder2
#EOF
#XXX: looks like the above can't contain {} or *   well it can but it won't be expanded (globbing?)
  if test -z "$1"; then
    error "you didn't pass a folder name as parameter"
    exit 1
  fi

#  read -r -d '' -a templist <&0 || true  #prevent EOF returning exit code 1 and due to set -e fail PKGBUILD!

  msg2 "Removing stuff from folder '$1'"
  pushd "$1" >/dev/null
#  echo ${templist[@]}
#TODO: maybe foreach and make sure they do not contain a first slash! as they are meant to be relative to current folder
#  cat <<<"$templist" | 
  xargs --no-run-if-empty --verbose --exit rm -rf -- # <<< "${templist[@]}"  #XXX: stuff is already comming from stdin
  # ${templist[@]}
  popd >/dev/null
#  msg2 "done."
}

lepatch() {
#  echo $-
#  trap -p
  #since we're inside PKGBUILD we know `set -e` is on, so we don't save its state
  set +e
#  set +o pipefail #unaffected by the setting of this
  #now we need to save/restore the ERR trap or else it gets triggered regardless of the +e setting
  local restoretrap="`trap -p | grep -E "ERR$"`"
  #clear ERR trap so we don't fail when patch or grep fails
  trap -- "" ERR
#XXX: PKGBUILD has: set -e which is why the following fails when grep doesn't find strings even if you add ` ; true`:
  msg2 "patch $*" #XXX: $* because $@ adds \n after first param O_o so msg2 doesn't show the rest
  patch "$@" | grep -B10 -E "(FAILED --|ignored|The next patch|which does not)"
  local ps=("${PIPESTATUS[@]}") #gets reset after running any statement, so need to save it
  #local ps="${PIPESTATUS[@]}" #gets reset after running any statement, so need to save it
#  declare +g -a "ps"

  #restore
  set -e
  eval "$restoretrap" 
#  $restoretrap #yep, unquoted, but doesn't work:
  #/usr/bin/makepkg:274+ trap -- ''\''error_function' '$pkgfunc'\''' ERR
  #PKGBUILD: line 274: trap: $pkgfunc': invalid signal specification
  #actual reported line by trap -p is: trap -- 'error_function $pkgfunc' ERR

#  set -o pipefail
# dsaodhasiohdoa #should fail - ok that worked!
  patch_ec="${ps[0]}"
  grep_ec="${ps[1]}"
  if test "$grep_ec" -eq 0; then # -o "$patch_ec" -ne 0; then
    #grepping found strings - this is bad
    error "patching failed! reapply changes in .rej files above and remake the patch, update patch file and re-execute this. Everything else should be patched because we're using only one patch UNLESS it's the first jinja patch, see the cmd above; For 'Skipping patch.' you just need to ignore those and re-run ./makepatchu and put the updated patch in place"
    ret=126
  else
    if test "$patch_ec" -ne 0; then
      ret="$patch_ec"
      error "patch command failed! exit code: $ret"
    fi
  fi
  return $ret
}

prepare() {

  # Set Python2 path
  mkdir -p python-path
  ln -s /usr/bin/python2 "${srcdir}/python-path/python" || echo 'probably symlink already existed - ignoring'
  export PATH="${srcdir}/python-path:$PATH"

#set|grep -i error
#exit 1
  pwd
  mkdir -p "${_folder}"
  cd "${_folder}"

# fetch if first time, sync if any other time
  if test -d "${_srcfolder}" -a -f ".gclient"; then
#    if [ ! -f ".gclient" ]; then
#      error ".gclient must exist in `pwd` Something went too wrong! must run fetch instead"
#      exit 1
#    fi

#    pushd "${_srcfolder}"
#    #overwrite all changes, usually made by us in this prepare() function
#    #let's hope user hasn't made any, they will be lost only when using checkout below (commented out now)
#    #changes will be stashed
#    #this is needed for gclient sync to work below
#
##fails
##    "${srcdir}/pythonic" build/linux/unbundle/replace_gyp_files.py "${_use_system[@]}" --undo
#
#    for each in ${_use_system[@]}; do
#      each2="$(echo -n "$each" | sed -e "s|.*_\(.*\)=[0-9]|\1|")"
#      msg2 "cleaning $each2"
#      _fold="third_party/${each2}"
#      if [ -d "$_fold" ]; then
#        _cleanfolder "${_fold}"
#      else
#        warning "ignoring inexistent folder $_fold"
#      fi
#    done

#    _cleanfolder "third_party/WebKit" #because of the jinja-r7.patch
#    _cleanfolder "third_party/webrtc"

#    popd

    msg2 "discarding changes..."
    gclient recurse --no-progress -- git checkout -- . >/dev/null || echo "ignoring failure" # >/dev/null
#    gclient recurse --no-progress -- git stash >/dev/null || echo "ignoring failure" # >/dev/null
#    gclient recurse --no-progress -- git stash clear >/dev/null || echo "ignored fails - because it's probably first run with empty src folder"
    rm -v -- "${_srcfolder}/content/common/va_wayland.sigs" ||true #created by the patch: enable_vaapi_on_linux.diff
    msg2 "sync-ing from the internet"
    pushd "${_srcfolder}"
    find . -type f -name '*.sedified' -or -type f -name '*.rej' -or -type f -name '*.cedified' | xargs rm -f -- 
#TEMP:    find . -type f -name '*_browsertest.*' | xargs rm -f --
#    TODO: is this really needed?: guess so, but should check updating instructions again sometime
    if test -d '.git'; then
      msg2 "git rebase-update aka git pull, sort of"
#      git pull --verbose --tags --depth=1  || ( git checkout master && git pull --tags --depth=1 --verbose )
#      git pull --progress --verbose || ( git checkout master && git pull --verbose --progress )
#good last:      git pull --verbose || ( git checkout master && git pull --verbose ) || echo "ignoring - because it's probably first run with empty src folder"


       git prune
       rm -- .git/gc.log || true
       git rebase-update
       #src: https://dev.chromium.org/developers/how-tos/get-the-code
       #//fixed: Cannot rebase-update with detached head + uncommitted changes.
       #//only the .keep filename is present/untracked! ok we remove it and keep .gitattributes

       #See "git help gc" for manual housekeeping.
       #error: The last gc run reported the following. Please correct the root cause
       #and remove .git/gc.log.
       #Automatic cleanup will not be performed until the file is removed.
       #warning: There are too many unreachable loose objects; run 'git prune' to remove them.

    fi
    popd
    #-vvv
    
    #"${srcdir}/pythonic"
#    gclient update --nohooks -v --no-history --jobs 8
#ok: need to modify .gclient_entries before syncing from internet! but it's part of gclient.py
#    updgclient_entries
    #gclient sync -vvv --nohooks --no-history --jobs 1
    msg2 "gclient sync (takes 33min on first time, on 13Mbps download, .git dir will be 776MiB and the whole src dir over 7GiB)"
    #--with_tags  #doesn't fetch tags if repo is already fetched
    gclient sync --nohooks --no-history --jobs 8  #not using -v , in order to be quiet; ok --shallow is bad, apparently!
#first time:
#real 33m31.809s
#user  11m25.590s
#sys 12m0.301s

    pwd
    gnexe="${_srcfolder}/buildtools/linux64/gn"
    if ! test -f "$gnexe"; then
      msg2 "gn executable isn't there, so this is probably the first run"
      msg2 "downloading it now..."
      download_from_google_storage -v --no_auth --no_resume --platform='linux*' --bucket chromium-gn -s src/buildtools/linux64/gn.sha1 || true
      #| grep -v -- 'CommandException: Invalid command "stat".'
      #^ this will fail with: "CommandException: Invalid command "stat"."
      # //yeah this didn't seem to work anyway: so using that grep which only returns 1 if that pattern isn't found should work around this and still fail if something else happened - but we can't see it :) unless using that -v to show anything other than that pattern
      #new error: Failed to fetch file gs://chromium-gn/feb65590433fab827a05b0b5fd6d8298aa572a25 for src/buildtools/linux64/gn. [Err: CommandException: option -o not recognized]
    fi
    if ! test -x "$gnexe"; then
      chmod a+x "$gnexe"
    fi
  else
    error "unsupported! the src folder '${_srcfolder}' must exist and .gclient file as a sibling too!"
    exit 22
#    msg2 "no src folder '${_srcfolder}' fetching..."
#    msg2 "Note: incomplete fetches should be restarted after you remove the src folder! (or so fetch says: that it doesn't support incomplete fetches)"
#    fetch --nohooks --no-history chromium

    #XXX: this patch is kinda useless to do after the fetch, because it already fetched everything that the patch is trying to exclude
#    patch -p1 -i "${srcdir}/$patchavoidfetch"
#    updgclient_entries
    # ^ this runs: gclient sync --nohooks --no-history
    #TODO: now how can I put a  -v  in there?
    # [0:00:01] remote: Sending approximately 2.72 GiB ...        
    # with --no-history that is
  fi

  cd "${_srcfolder}"
  pwd

#  cd "chromium-${pkgver}"

  # Fix to save configuration in ~/.config/chromium
      #-e "s|'confdir': 'chromium'|'confdir': 'chromium'|" \
  sed -e "s|'filename': 'chromium-browser'|'filename': 'chromium'|" \
      -i chrome/chrome_exe.gypi
#  sed -e 's|config_dir.Append("chromium")|config_dir.Append("chromium-dev")|' \
#      -e 's|config_dir.Append("chrome-frame")|config_dir.Append("chrome-frame-dev")|' \
#      -i chrome/common/chrome_paths_linux.cc

  msg2 "Patching the sources"
  # Patch sources from Gentoo
  lepatch -Np1 -i "${srcdir}/chromium-system-ffmpeg-r2.patch"
  lepatch -Np0 -i "${srcdir}/chromium-system-jinja-r11.patch"
#  patch -p0 -i "${srcdir}/chromium-linker-warnings-r0.patch" #TODO: should set fatal_linker_warnings to false instead of applying this patch!

  # Misc Patches:
  lepatch -Np1 -i "${srcdir}/enable_vaapi_on_linux.diff"
  lepatch -Np1 -i "${srcdir}/minizip.patch"

  # Patch from crbug (chromium bugtracker)
  # https://crbug.com/473866
  lepatch -Np0 -i "${srcdir}/chromium-widevine-r1.patch"
  sed 's|@WIDEVINE_VERSION@|The Cake Is a Lie|g' -i "third_party/widevine/cdm/stub/widevine_cdm_version.h"

  for eachpatch in "${allpatches[@]}"; do
    lepatch -Np1 -i "${srcdir}/${eachpatch}"
  done

  ##
  msg2 "Fix libpng errors"
  pushd chrome/app/theme &> /dev/null
  export IFS=$'\n'
  for i in $(find . -name '*.png' -type f); do
    mogrify "${i}" &> /dev/null
  done
  export IFS=' '
  popd &> /dev/null

  # Make it possible to remove third_party/adobe
  #FIXME: is this really needed in GN? or only has effect with GYP? - no idea
#  echo > "${srcdir}/flapper_version.h"
  _flapfile="${srcdir}/flapper_version.h"
  [ -f "$_flapfile" ] || echo > "$_flapfile"

  _flags+=( -Dflapper_version_h_file="${_flapfile}" )

  # Remove most bundled libraries. Some are still needed.
#  msg2 "Removing unnecessary components to save space"
#  python2 build/linux/unbundle/remove_bundled_libraries.py ${_necesary[@]} --do-remove
#  rm -fr native_client/toolchain
#  rm -fr build/linux/debian*

  if [ "${_build_pnacl}" = "1" ]; then
    msg2 "Setup NaCl/PNaCl SDK: Download and install NaCl/PNaCl toolchains"
    python2 build/download_nacl_toolchains.py --packages nacl_x86_newlib,pnacl_newlib,pnacl_translator sync --extract
  fi

#  msg2 "Make sure use Python2" don't need this due to PATH being set with a symlinked python to python2
#  find . -name '*.py' -exec sed -r 's|/usr/bin/python$|&2|g' -i {} +
#  find . -name '*.py' -exec sed -r 's|/usr/bin/env python$|&2|g' -i {} +

  touch chrome/test/data/webui/i18n_process_css_test.html

  msg2 "done sources"

  mkdir -p "${_reldir}"

##    gn --root=src gen /tmp/out/Default
    pwd #already in src
    cp -- "../args.gn" "${_reldir}"
##    "${srcdir}/pythonic"
      gn gen "${_reldir}"
      #args.gn generated from:
#      gn args "${_reldir}" --list
      #and also without --list to edit it
#msg2 "ok wait"
#exit 1

  pwd
  echo "$PATH"
  msg2 "running: gclient runhooks (note: rerun this lots if you get this skippable error: CommandException: Invalid command \"stat\")"
  #"${srcdir}/pythonic"
  gclient runhooks   #can't run this here because it runs gyp_chromium!

}

build() {

  msg2 "Build the Launcher"
  make -C "chromium-launcher-${_launcher_ver}" CHROMIUM_SUFFIX="-dev" PREFIX=/usr ${_launcher_gtk}

  cd "chromium-${pkgver}"

  # Set ccache environment
  if [ "${_use_ccache}" = "1" ]; then
    msg2 "Setup ccache"
    export CCACHE_CPP2=yes
    export CCACHE_SLOPPINESS=time_macros
  fi

  # Use system/bundled Clang? or GCC?
#  _bundled_clang_path="${srcdir}/chromium-${pkgver}/third_party/llvm-build/Release+Asserts/bin"

#FIXME: remove
cat >/dev/null <<EOF
  if [ "${_use_clang}" = "0" ]; then
    msg2 "Setup for use system GCC"
    if [ "${_use_ccache}" = "0" ]; then
      export CC="gcc -Wall"
      export CXX="g++ -Wall"
    elif [ "${_use_ccache}" = "1" ]; then
      export CC="ccache gcc -Wall"
      export CXX="ccache g++ -Wall"
    fi
  elif [ "${_use_clang}" = "1" ]; then
#    if [ "${_use_bundled_clang}" = "0" ]; then
EOF
      msg2 "Setup for use system Clang"
      if [ "${_use_ccache}" = "0" ]; then
        export CC="clang -Qunused-arguments"
        export CXX="clang++ -Qunused-arguments"
      elif [ "${_use_ccache}" = "1" ]; then
        export CC="ccache clang -Qunused-arguments"
        export CXX="ccache clang++ -Qunused-arguments"
      fi
      export CXXFLAGS="${CXXFLAGS} -Wno-unknown-warning-option"
#FIXME: remove
cat >/dev/null <<EOF
    elif [ "${_use_bundled_clang}" = "1" ]; then
      msg2 "Setup and build bundled Clang"
      python2 tools/clang/scripts/update.py --force-local-build --without-android --gcc-toolchain=/usr
      if [ "${_use_ccache}" = "0" ]; then
        export CC="${_bundled_clang_path}/clang -Qunused-arguments"
        export CXX="${_bundled_clang_path}/clang++ -Qunused-arguments"
      elif [ "${_use_ccache}" = "1" ]; then
        export CC="ccache ${_bundled_clang_path}/clang -Qunused-arguments"
        export CXX="ccache ${_bundled_clang_path}/clang++ -Qunused-arguments"
      fi
    fi
  fi
EOF

  # Changing bundle libraries to system ones
#  python2 build/linux/unbundle/replace_gyp_files.py ${_use_system[@]}

  # update libaddressinput strings
#  python2 third_party/libaddressinput/chromium/tools/update-strings.py

  #TODO: add to compilation: -fno-delete-null-pointer-checks
  #why? src: https://bugs.chromium.org/p/chromium/issues/detail?id=604165
  #SEGV_MAPERR
  #TODO: add this no-warning
  # -Wno-undefined-bool-conversion

  CFLAGS="${CFLAGS} -fno-delete-null-pointer-checks -Wno-undefined-bool-conversion"
  CXXFLAGS="${CXXFLAGS} -fno-delete-null-pointer-checks -Wno-undefined-bool-conversion" #ok this is useless then, since: export -n below(aka remove the export property from each NAME)
  # CFLAGS are passed through -Drelease_extra_cflags=
  export -n CFLAGS CXXFLAGS

  msg2 "Starting building Chromium..."
  # Configure the builder
#  python2 build/gyp_chromium --depth=. -Drelease_extra_cflags="$CFLAGS" ${_flags[@]} ${_use_system[@]}

  # Build mksnapshot and pax-mark it.
  if [ "${_use_pax}" = "1" ]; then
    ninja -C out/Release -v "mksnapshot"
    paxctl -cm "out/Release/mksnapshot"
  fi

  # Build all with ninja
  LC_ALL=C ninja -C out/Release -v pdf chrome chrome_sandbox chromedriver widevinecdmadapter clearkeycdm

  # Pax-mark again
  if [ "${_use_pax}" = "1" ]; then
    paxctl -cm out/Release/chrome
  fi
}

package() {
  # Install launcher
  make -C "chromium-launcher-${_launcher_ver}" CHROMIUM_SUFFIX="-dev" PREFIX=/usr DESTDIR="${pkgdir}" install-strip
  install -Dm644 "chromium-launcher-${_launcher_ver}/LICENSE" "${pkgdir}/usr/share/licenses/chromium-dev/LICENSE.launcher"

  pushd "chromium-${pkgver}/out/Release" &> /dev/null

  # Install binaries
  install -Dm755 chrome "${pkgdir}/usr/lib/chromium-dev/chromium-dev"
  install -Dm644 chrome.1 "${pkgdir}/usr/share/man/man1/chromium-dev.1"
  install -Dm4755 chrome_sandbox "${pkgdir}/usr/lib/chromium-dev/chrome-sandbox"
  install -Dm755 chromedriver "${pkgdir}/usr/lib/chromium-dev/chromedriver"
  ln -s /usr/lib/chromium-dev/chromedriver "${pkgdir}/usr/bin/chromedriver-dev"

  # Install libs
  for i in libwidevinecdmadapter libclearkeycdm; do
    install -Dm755 "${i}.so" "${pkgdir}/usr/lib/chromium-dev/${i}.so"
  done
  install -Dm644 icudtl.dat "${pkgdir}/usr/lib/chromium-dev/icudtl.dat" # https://crbug.com/584920 and https://crbug.com/592268
  install -Dm644 natives_blob.bin "${pkgdir}/usr/lib/chromium-dev/natives_blob.bin"
  install -Dm644 snapshot_blob.bin "${pkgdir}/usr/lib/chromium-dev/snapshot_blob.bin"

  # Install Resources
  for i in content_resources keyboard_resources resources chrome_100_percent chrome_200_percent; do
    install -Dm644 "${i}.pak" "${pkgdir}/usr/lib/chromium-dev/${i}.pak"
  done

  # Install locales
  find pseudo_locales -type f -name "*.pak" -exec install -Dm644 '{}' "${pkgdir}/usr/lib/chromium-dev/{}" \;
  find locales -type f -name "*.pak" -exec install -Dm644 '{}' "${pkgdir}/usr/lib/chromium-dev/{}" \;
  find resources -type f -name "*" -exec install -Dm644 '{}' "${pkgdir}/usr/lib/chromium-dev/{}" \;
  (cd "${pkgdir}/usr/lib/chromium-dev"; ln -s locales remote_locales)

  # Install icons
  for _size in 16 22 24 32 48 128 256; do
    case "${_size}" in
      16|32) _branding="${srcdir}/chromium-${pkgver}/chrome/app/theme/default_100_percent/chromium" ;;
      *) _branding="${srcdir}/chromium-${pkgver}/chrome/app/theme/chromium" ;;
    esac
    install -Dm644 "${_branding}/product_logo_${_size}.png" "${pkgdir}/usr/share/icons/hicolor/${_size}x${_size}/apps/chromium-dev.png"
  done

  # Install pNaCL/NaCL stuff if is detected
  if [ "${_build_pnacl}" = "1" ]; then
    install -Dm755 nacl_helper "${pkgdir}/usr/lib/chromium-dev/nacl_helper"
    install -Dm755 nacl_helper_bootstrap "${pkgdir}/usr/lib/chromium-dev/nacl_helper_bootstrap"
    install -Dm755 nacl_helper_nonsfi "${pkgdir}/usr/lib/chromium-dev/nacl_helper_nonsfi"
    install -Dm755 "nacl_irt_x86_${_pnacl_arch}.nexe" "${pkgdir}/usr/lib/chromium-dev/nacl_irt_x86_${_pnacl_arch}.nexe"
    (cd pnacl; for i in $(find -type f); do install -Dm755 "${i}" "${pkgdir}/usr/lib/chromium-dev/pnacl/${i}"; done)
  fi

  popd &> /dev/null

  # Install some external files
  install -Dm644 "chromium-${pkgver}/chrome/installer/linux/common/desktop.template" "${pkgdir}/usr/share/applications/chromium-dev.desktop"
  sed -e 's|@@MENUNAME@@|Chromium-dev|g' \
      -e 's|@@USR_BIN_SYMLINK_NAME@@|chromium-dev|g' \
      -e 's|@@PACKAGE@@|chromium-dev|g' \
      -i "${pkgdir}/usr/share/applications/chromium-dev.desktop"
  install -Dm644 chromium-dev.svg "${pkgdir}/usr/share/icons/hicolor/scalable/apps/chromium-dev.svg"
  install -Dm644 "chromium-${pkgver}/LICENSE" "${pkgdir}/usr/share/licenses/chromium-dev/LICENSE"

#FIXME: remove this
cat >/dev/null <<EOF
  # install gnome stuff if is detected
  if [ "${_use_gnome}" = "1" ]; then
    install -Dm644 "chromium-${pkgver}/chrome/installer/linux/common/default-app.template" "${pkgdir}/usr/share/gnome-control-center/default-apps/chromium-dev.xml"
    sed -e 's|@@MENUNAME@@|Chromium-dev|g' \
        -e 's|@@INSTALLDIR@@|/usr/bin|g' \
        -e 's|@@PACKAGE@@|chromium-dev|g' \
        -i "${pkgdir}/usr/share/gnome-control-center/default-apps/chromium-dev.xml"
  fi
EOF

  # Manually strip binaries so that 'nacl_irt_*.nexe' is left intact
  if [ "${_build_pnacl}" = "1" ]; then
    strip $STRIP_BINARIES "${pkgdir}/usr/lib/chromium-dev/"nacl_helper{,_bootstrap,_nonsfi}
  fi
  strip $STRIP_BINARIES "${pkgdir}/usr/lib/chromium-dev/"{chromium-dev,chrome-sandbox,chromedriver}
  strip $STRIP_SHARED "${pkgdir}/usr/lib/chromium-dev/"lib{widevinecdmadapter,clearkeycdm}.so
}
