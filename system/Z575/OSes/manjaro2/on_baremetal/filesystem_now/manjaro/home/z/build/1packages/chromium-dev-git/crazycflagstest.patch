diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index 47a732b..43695a3 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -191,13 +191,13 @@ config("compiler") {
     } else if (is_posix && !is_chromeos && !is_nacl) {
       # TODO(phajdan.jr): Use -fstack-protector-strong when our gcc supports it.
       # See also https://crbug.com/533294
-      cflags += [ "--param=ssp-buffer-size=4" ]
+      #cflags += [ "--param=ssp-buffer-size=4" ]
 
       # The x86 toolchain currently has problems with stack-protector.
       if (is_android && current_cpu == "x86") {
         cflags += [ "-fno-stack-protector" ]
       } else {
-        cflags += [ "-fstack-protector" ]
+        #cflags += [ "-fstack-protector" ]
       }
     }
 
@@ -272,7 +272,11 @@ config("compiler") {
   # ---------------------------------
   if (is_linux || is_android) {
     cflags += [
-      "-fPIC",
+      "-fPIC", #/usr/bin/ld: obj/third_party/angle/libtranslator_lib.a(RecordConstantPrecision.o): relocation R_X86_64_32S against `.rodata._ZTVN12_GLOBAL__N_132RecordConstantPrecisionTraverserE' can not be used when making a shared object; recompile with -fPIC
+#      "-mtune=native",#remove this because it might map native to i486 or god knows what! just like for -march=native below!
+      "-fomit-frame-pointer",
+      #"-fno-schedule-insns2", #not supported because clang
+      #"-fno-delete-null-pointer-checks",#not supported because clang
       "-pipe",  # Use pipes for communicating between sub-processes. Faster.
     ]
 
@@ -502,7 +506,8 @@ config("compiler_cpu_abi") {
     if (current_cpu == "x64") {
       cflags += [
         "-m64",
-        "-march=x86-64",
+        "-march=x86-64", #this is good also because I can then use it on the T400
+        #"-march=native", #error: unknown target CPU 'i486'
       ]
       ldflags += [ "-m64" ]
     } else if (current_cpu == "x86") {
@@ -1053,14 +1058,15 @@ config("chromium_code") {
   if (is_win) {
     cflags = [ "/W4" ]  # Warning level 4.
   } else {
-    cflags = [ "-Wall" ]
-    if (treat_warnings_as_errors) {
-      cflags += [ "-Werror" ]
-    }
-    if (is_clang) {
-      # Enable -Wextra for chromium_code when we control the compiler.
-      cflags += [ "-Wextra" ]
-    }
+#    cflags = [ "-Wall" ]
+    cflags = [ ]
+#    if (treat_warnings_as_errors) {
+#      cflags += [ "-Werror" ]
+#    }
+#    if (is_clang) {
+#      # Enable -Wextra for chromium_code when we control the compiler.
+#      cflags += [ "-Wextra" ]
+#    }
 
     # In Chromium code, we define __STDC_foo_MACROS in order to get the
     # C99 macros on Mac and Linux.
@@ -1115,11 +1121,11 @@ config("no_chromium_code") {
     if (treat_warnings_as_errors && is_clang) {
       cflags += [ "-Werror" ]
     }
-    if (is_clang && !is_nacl) {
-      # TODO(thakis): Remove !is_nacl once
-      # https://codereview.webrtc.org/1552863002/ made its way into chromium.
-      cflags += [ "-Wall" ]
-    }
+#    if (is_clang && !is_nacl) {
+#      # TODO(thakis): Remove !is_nacl once
+#      # https://codereview.webrtc.org/1552863002/ made its way into chromium.
+#      cflags += [ "-Wall" ]
+#    }
   }
 
   if (is_clang) {
