# Build arguments go here. Examples:
#   is_component_build = true
#   is_debug = false
# See "gn args <out_dir> --list" for available build arguments.

# this file was generated by 
# using gn gen with an empty args.gn
# then redirecting output of
# gn args /tmp/out/Default --list
# to this file and using vim to replace stuff and make it look like it does.

aec_debug_dump = false #Default = false
#    //third_party/webrtc/modules/audio_processing/BUILD.gn:15
#    Outputs some low-level debug files.

aec_untrusted_delay_for_testing = false #Default = false
#    //third_party/webrtc/modules/audio_processing/BUILD.gn:20
#    Disables the usual mode where we trust the reported system delay
#    values the AEC receives. The corresponding define is set appropriately
#    in the code, but it can be force-enabled here for testing.

android_full_debug = false #Default = false
#    //build/config/compiler/BUILD.gn:21
#    Normally, Android builds are lightly optimized, even for debug builds, to
#    keep binary size down. Setting this flag to true disables such optimization

#TODO: true
blink_asserts_always_on = true #Default = false
#    //third_party/WebKit/Source/config.gni:27

blink_gc_plugin = false #Default = false
#    //third_party/WebKit/Source/config.gni:24
#    Set to true to enable the clang plugin that checks the usage of the Blink
#    garbage-collection infrastructure during compilation.

blink_gc_plugin_dump_graph = false #Default = false
#    //third_party/WebKit/Source/config.gni:25

build_cpu_arch = "x64" #Default = "x64"
#    //build/config/BUILDCONFIG.gn:63

build_ffmpegsumo = true #Default = true
#    //third_party/ffmpeg/ffmpeg_options.gni:26
#    When set to false will build Chromium against Chrome's FFmpeg headers, but
#    not build ffmpegsumo itself.  Users are expected to build and provide
#    their own version of ffmpegsumo.

build_os = "linux" #Default = "linux"
#    //build/config/BUILDCONFIG.gn:64

build_with_chromium = true #Default = true
#    //third_party/webrtc/build/webrtc.gni:15
#    Assume Chromium build for now, since that's the priority case for getting GN
#    up and running with WebRTC.

#TODO: false
build_with_libjingle = false #Default = true
#    //third_party/webrtc/build/webrtc.gni:16

#TODO: what?
build_with_mozilla = false #Default = false
#    //third_party/webrtc/build/webrtc.gni:51
#    Enable to use the Mozilla internal settings.

bundle_freetype = false #Default = false
#    //third_party/pdfium/BUILD.gn:12
#    On Android there's no system FreeType. On Windows and Mac, only a few
#    methods are used from it.

#TODO: false
clang_use_chrome_plugins = false #Default = true
#    //build/config/clang/clang.gni:8
#    Indicates if the build should use the Chrome-specific plugins for enforcing
#    coding guidelines, etc. Only used when compiling with Clang.

#TODO: false ?
compile_credentials = true #Default = true
#    //sandbox/linux/BUILD.gn:11

compile_seccomp_bpf_demo = true #Default = true
#    //sandbox/linux/BUILD.gn:14

compile_suid_client = true #Default = true
#    //sandbox/linux/BUILD.gn:9

content_shell_product_name = "Content Shell" #Default = "Content Shell"
#    //content/shell/BUILD.gn:14

content_shell_version = "19.77.34.5" #Default = "19.77.34.5"
#    //content/shell/BUILD.gn:19
#    The "19" is so that sites that sniff for version think that this is
#    something reasonably current; the "77.34.5" is a hint that this isn't a
#    standard Chrome.

cpu_arch = "x64" #Default = "x64"
#    //build/config/BUILDCONFIG.gn:61
#    TODO(dpranke): These values are here for backwards compatibility and
#    should be deleted when all of the builders and configs have been updated.

#current_cpu = "" #Default = ""
#    (Internally set)

#current_os = "" #Default = ""
#    (Internally set)

#TODO: true  (when debug)
dcheck_always_on = true #Default = false
#    //build/config/BUILD.gn:29
#    Set to true to enable dcheck in Release builds.

debug_devtools = false #Default = false
#    //build/config/features.gni:44
#    If debug_devtools is set to true, JavaScript files for DevTools are stored
#    as is and loaded from disk. Otherwise, a concatenated file is stored in
#    resources.pak. It is still possible to load JS files from disk by passing
#    --debug-devtools cmdline switch.

disable_file_support = false #Default = false
#    //net/BUILD.gn:52
#    Disables support for file URLs.  File URL support requires use of icu.

disable_iterator_debugging = false #Default = false
#    //build/config/BUILD.gn:15
#    When set, turns off the (normally-on) iterator debugging and related stuff
#    that is normally turned on for Debug builds. These are generally useful for
#    catching bugs but in some cases may cause conflicts or excessive slowness.

dont_embed_build_metadata = false #Default = false
#    //build/config/BUILD.gn:26
#    Set to true to not store any build metadata, e.g. ifdef out all __DATE__
#    and __TIME__. Set to 0 to reenable the use of these macros in the code
#    base. See http://crbug.com/314403.
   
#    Continue to embed build meta data in Official builds, basically the
#    time it was built.
#    TODO(maruel): This decision should be revisited because having an
#    official deterministic build has high value too but MSVC toolset can't
#    generate anything deterministic with WPO enabled AFAIK.

#TODO: false ?
enable_app_list = true #Default = true
#    //build/config/features.gni:66

#TODO: false
enable_autofill_dialog = true #Default = true
#    //build/config/features.gni:70

#TODO: false
enable_background = true #Default = true
#    //build/config/features.gni:56
#    Enables support for background apps.

enable_browser_cdms = false #Default = false
#    //media/media_options.gni:50
#    Enables browser side Content Decryption Modules. Required for embedders
#    (e.g. Android and ChromeCast) that use a browser side CDM.

#TODO: false
enable_captive_portal_detection = false #Default = true
#    //build/config/features.gni:58

enable_configuration_policy = true #Default = true
#    //build/config/features.gni:53

enable_full_stack_frames_for_profiling = false #Default = false
#    //build/config/compiler/BUILD.gn:38
#    Compile in such a way as to make it possible for the profiler to unwind full
#    stack frames. Setting this flag has a large effect on the performance of the
#    generated code than just setting profiling, but gives the profiler more
#    information to analyze.
#    Requires profiling to be set to true.

#TODO: false
enable_google_now = false #Default = true
#    //build/config/features.gni:72

#TODO: false
enable_mdns = false #Default = true
#    //build/config/features.gni:20
#    Multicast DNS.

enable_media_mojo_renderer = false #Default = false
#    //media/media_options.gni:53
#    Experiment to enable mojo based media renderer: http://crbug.com/431776

enable_mpeg2ts_stream_parser = false #Default = false
#    //media/media_options.gni:46
#    Enables the MPEG2-TS stream parser for use with Media Source. Disabled by
#    default since it's not available on the normal Web Platform and costs money.

enable_nacl = false #Default = false
#    //build/config/features.gni:36

enable_nacl_untrusted = false #Default = false
#    //build/config/features.gni:37

enable_oilpan = false #Default = false
#    //third_party/WebKit/public/features.gni:7
#    Enables the Oilpan garbage-collection infrastructure.

#TODO: false
enable_one_click_signin = false #Default = true
#    //build/config/features.gni:74

enable_plugin_installation = false #Default = false
#    //build/config/features.gni:64

#TODO: false
enable_plugins = true #Default = true
#    //build/config/features.gni:22

enable_pnacl = false #Default = false
#    //build/config/features.gni:38

enable_profiling = false #Default = false
#    //build/config/compiler/BUILD.gn:31
#    Compile in such a way as to enable profiling of the generated code. For
#    example, don't omit the frame pointer and leave in symbols.

#TODO: false
enable_remoting = false #Default = true
#    //build/config/features.gni:76

#TODO: false (see what this is first!)
enable_session_service = true #Default = true
#    //build/config/features.gni:62
#    Enables use of the session service, which is enabled by default.
#    Android stores them separately on the Java side.

#TODO: false  (what is this exactly?)
enable_supervised_users = true #Default = true
#    //build/config/features.gni:68

#TODO: false
enable_webrtc = false #Default = true
#    //build/config/features.gni:48
#    Enables WebRTC.
#    TODO(GYP) make mac and android work.

ffmpeg_branding = "Chromium" #Default = "Chromium"
#    //third_party/ffmpeg/ffmpeg_options.gni:21
#    Controls whether we build the Chromium or Google Chrome version of FFmpeg.
#    The Google Chrome version contains additional codecs. Typical values are
#    Chromium, Chrome, ChromiumOS, and ChromeOS.

goma_dir = "/home/emacs/goma" #Default = "/home/emacs/goma"
#    //build/toolchain/goma.gni:20
#    Absolute directory containing the Goma source code.

google_api_key = "" #Default = ""
#    //google_apis/BUILD.gn:45
#    Set these to bake the specified API keys and OAuth client
#    IDs/secrets into your build.
   
#    If you create a build without values baked in, you can instead
#    set environment variables to provide the keys at runtime (see
#    src/google_apis/google_api_keys.h for details).  Features that
#    require server-side APIs may fail to work if no keys are
#    provided.
   
#    Note that if you are building an official build or if
#    use_official_google_api_keys has been set to true (explicitly or
#    implicitly), these values will be ignored and the official
#    keys will be used instead.

google_default_client_id = "" #Default = ""
#    //google_apis/BUILD.gn:48
#    See google_api_key.

google_default_client_secret = "" #Default = ""
#    //google_apis/BUILD.gn:51
#    See google_api_key.

host_cpu = "x64" #Default = "x64"
#    (Internally set)

host_os = "linux" #Default = "linux"
#    (Internally set)

icu_use_data_file = true #Default = true
#    //third_party/icu/config.gni:15
#    Tells icu to load an external data file rather than rely on the icudata
#    being linked directly into the binary.
   
#    This flag is a bit confusing. As of this writing, icu.gyp set the value to
#    0 but common.gypi sets the value to 1 for most platforms (and the 1 takes
#    precedence).
   
#    TODO(GYP) We'll probably need to enhance this logic to set the value to
#    true or false in similar circumstances.

is_asan = false #Default = false
#    //build/config/BUILDCONFIG.gn:99
#    Compile for Address Sanitizer to find memory bugs.

is_chrome_branded = false #Default = false
#    //build/config/BUILDCONFIG.gn:96
#    Select the desired branding flavor. False means normal Chromium branding,
#    true means official Google Chrome branding (requires extra Google-internal
#    resources).

is_clang = true #Default = true
#    //build/config/BUILDCONFIG.gn:85
#    Set to true when compiling with the Clang compiler. Typically this is used
#    to configure warnings.

#TODO: true  (shared libs?)
is_component_build = false #Default = false
#    //build/config/BUILDCONFIG.gn:75
#    Component build.

#TODO: true  (and/OR also set dcheck to true?)
is_debug = false #Default = true
#    //build/config/BUILDCONFIG.gn:78
#    Debug build.

is_desktop_linux = true #Default = true
#    //build/config/BUILDCONFIG.gn:81
#    Whether we're a traditional desktop unix.

is_ensemble = false #Default = false
#    //media/media_options.gni:59
#    Override to omit code that depends on the X11 and fontconfig libraries.

is_lsan = false #Default = false
#    //build/config/BUILDCONFIG.gn:102
#    Compile for Leak Sanitizer to find leaks.

#TODO: true
is_msan = true #Default = false
#    //build/config/BUILDCONFIG.gn:105
#    Compile for Memory Sanitizer to find uninitialized reads.

is_official_build = false #Default = false
#    //build/config/BUILDCONFIG.gn:91
#    Selects the desired build flavor. Official builds get additional
#    processing to prepare for release. Normally you will want to develop and
#    test with this flag off.

is_openbsd = false #Default = false
#    //media/media_options.gni:56
#    TODO(GYP): This should be a platform define.

#TODO: true
is_tsan = true #Default = false
#    //build/config/BUILDCONFIG.gn:108
#    Compile for Thread Sanitizer to find threading bugs.

#TODO: true
link_pulseaudio = true #Default = false
#    //media/media_options.gni:9
#    Allows distributions to link pulseaudio directly (DT_NEEDED) instead of
#    using dlopen. This helps with automated detection of ABI mismatches and
#    prevents silent errors.

#TODO: false
linux_use_bundled_binutils = false #Default = true
#    //build/config/compiler/BUILD.gn:27
#    Whether to use the binary binutils checked into third_party/binutils.
#    These are not multi-arch so cannot be used except on x86 and x86-64 (the
#    only two architectures that are currently checked in). Turn this off when
#    you are using a custom toolchain and need to control -B in cflags.

media_use_ffmpeg = true #Default = true
#    //media/media_options.gni:14
#    Enable usage of FFmpeg within the media library. Used for most software
#    based decoding, demuxing, and sometimes optimized FFTs. If disabled,
#    implementors must provide their own demuxers and decoders.

media_use_libvpx = true #Default = true
#    //media/media_options.gni:18
#    Enable usage of libvpx within the media library. Used for software based
#    decoding of VP9 and VP8A type content.

openmax_big_float_fft = true #Default = true
#    //third_party/openmax_dl/dl/BUILD.gn:9
#    Override this value to build with small float FFT tables

os = "linux" #Default = "linux"
#    //build/config/BUILDCONFIG.gn:62

pkg_config = "" #Default = ""
#    //build/config/linux/pkg_config.gni:33
#    A pkg-config wrapper to call instead of trying to find and call the right
#    pkg-config directly. Wrappers like this are common in cross-compilation
#    environments.
#    Leaving it blank defaults to searching PATH for 'pkg-config' and relying on
#    the sysroot mechanism to find the right .pc files.

prebuilt_network_service_location = "" #Default = ""
#    //build/module_args/mojo.gni:23
#    Specify prebuilt network service mojo file location rather than download
#    from gs://mojo.
   
#    This variable only used when build_network_service_from_source is false.
   
#    Currently only android_arm and linux_64 available on gs://mojo, and no plan
#    to support more(https://codereview.chromium.org/921873003).
#    It is needed for developers works on other platforms like android_x86 and
#    android_x64. And it is also useful for supportted platform as well when
#    developer want to try its own version of network service files.

#TODO: true and (check https://www.youtube.com/html5  if that changes the 2nd row and if can watch live streams)
proprietary_codecs = true #Default = false
#    //build/config/features.gni:51
#    Enables proprietary codecs and demuxers; e.g. H264, MOV, AAC, and MP3.

root_extra_deps = [] #Default = []
#    //BUILD.gn:22
#    A list of extra dependencies to add to the root target. This allows a
#    checkout to add additional targets without explicitly changing any checked-
#    in files.

rtc_build_armv7_neon = false #Default = false
#    //third_party/webrtc/build/webrtc.gni:108
#    WebRTC builds ARM v7 Neon instruction set optimized code for both iOS and
#    Android, which is why we currently cannot use the variables in
#    //build/config/arm.gni (since it disables Neon for Android).

rtc_build_json = true #Default = true
#    //third_party/webrtc/build/webrtc.gni:40
#    Disable these to not build components which can be externally provided.

rtc_build_libjpeg = true #Default = true
#    //third_party/webrtc/build/webrtc.gni:41

rtc_build_libvpx = true #Default = true
#    //third_party/webrtc/build/webrtc.gni:43

rtc_build_libyuv = true #Default = true
#    //third_party/webrtc/build/webrtc.gni:42

rtc_build_ssl = true #Default = true
#    //third_party/webrtc/build/webrtc.gni:45

rtc_build_vp9 = true #Default = true
#    //third_party/webrtc/build/webrtc.gni:44

rtc_enable_android_opensl = false #Default = false
#    //third_party/webrtc/build/webrtc.gni:53

rtc_enable_data_logging = false #Default = false
#    //third_party/webrtc/build/webrtc.gni:34
#    Enable data logging. Produces text files with data logged within engines
#    which can be easily parsed for offline processing.

rtc_enable_protobuf = true #Default = true
#    //third_party/webrtc/build/webrtc.gni:37
#    Enables the use of protocol buffers for debug recordings.

rtc_have_dbus_glib = false #Default = false
#    //third_party/webrtc/build/webrtc.gni:48
#    Disable by default.

rtc_include_internal_audio_device = false #Default = false
#    //third_party/webrtc/build/webrtc.gni:66
#    Exclude internal ADM since Chromium uses its own IO handling.

rtc_include_opus = true #Default = true
#    //third_party/webrtc/build/webrtc.gni:19
#    Disable this to avoid building the Opus audio codec.

rtc_include_pulse_audio = false #Default = false
#    //third_party/webrtc/build/webrtc.gni:63
#    Exclude pulse audio on Chromium since its prerequisites don't require
#    pulse audio.

rtc_include_tests = false #Default = false
#    //third_party/webrtc/build/webrtc.gni:81

rtc_jsoncpp_root = "//third_party/jsoncpp/source/include" #Default = "//third_party/jsoncpp/source/include"
#    //third_party/webrtc/build/webrtc.gni:23
#    Used to specify an external Jsoncpp include path when not compiling the
#    library that comes with WebRTC (i.e. rtc_build_json == 0).

rtc_prefer_fixed_point = false #Default = false
#    //third_party/webrtc/build/webrtc.gni:30
#    Selects fixed-point code where possible.

rtc_restrict_logging = true #Default = true
#    //third_party/webrtc/build/webrtc.gni:82

rtc_ssl_root = "" #Default = ""
#    //third_party/webrtc/build/webrtc.gni:27
#    Used to specify an external OpenSSL include path when not compiling the
#    library that comes with WebRTC (i.e. rtc_build_ssl == 0).

rtc_use_lto = false #Default = false
#    //third_party/webrtc/build/webrtc.gni:58
#    Link-Time Optimizations.
#    Executes code generation at link-time instead of compile-time.
#    https://gcc.gnu.org/wiki/LinkTimeOptimization

rtc_use_openmax_dl = true #Default = true
#    //third_party/webrtc/build/webrtc.gni:100

symbol_level = -1 #Default = -1
#    //build/config/BUILDCONFIG.gn:72
#    How many symbols to include in the build. This affects the performance of
#    the build since the symbols are large and dealing with them is slow.
#      2 means regular build with symbols.
#      1 means minimal symbols, usually enough for backtraces only.
#      0 means no symbols.
#      -1 means auto-set (off in release, regular in debug).

#target_cpu = "" #Default = ""
#    (Internally set)

#target_os = "" #Default = ""
#    (Internally set)

#target_sysroot = "" #Default = ""
#    //build/config/sysroot.gni:11
#    The absolute path of the sysroot that is applied when compiling using
#    the target toolchain.

toolkit_views = true #Default = true
#    //build/config/ui.gni:31
#    True means the UI is built using the "views" framework.

use_allocator = "tcmalloc" #Default = "tcmalloc"
#    //build/config/allocator.gni:14
#    Memory allocator to use. Set to "none" to use default allocator.

#TODO: false
use_alsa = false #Default = true
#    //media/media_options.gni:38

#TODO: experiment: false
use_ash = true #Default = true
#    //build/config/ui.gni:17
#    Indicates if Ash is enabled. Ash is the Aura Shell which provides a
#    desktop-like environment for Aura. Requires use_aura = true

use_aura = true #Default = true
#    //build/config/ui.gni:28
#    Indicates if Aura is enabled. Aura is a low-level windowing library, sort
#    of a replacement for GDI or GTK.

use_ccache = true #Default = false
#    //build/toolchain/ccache.gni:24
#    Set to true to enable ccache.  Probably doesn't work on windows.

use_clang_type_profiler = false #Default = false
#    //build/toolchain/clang.gni:8
#    Enable the optional type profiler in Clang, which will tag heap allocations
#    with the allocation type.

use_cras = false #Default = false
#    //media/media_options.gni:27
#    Override to dynamically link the cras (ChromeOS audio) library.

#TODO: what?
use_debug_fission = true #Default = true
#    //build/config/compiler/BUILD.gn:50

use_evdev_gestures = false #Default = false
#    //build/config/ui.gni:24
#    Support ChromeOS touchpad gestures with ozone.

use_glib = true #Default = true
#    //build/config/ui.gni:34
#    Whether we should use glib, a low level C utility library.

use_gold = true #Default = true
#    //build/config/compiler/BUILD.gn:42
#    Use gold for linking on 64-bit Linux only (on 32-bit it runs out of
#    address space, and it doesn't support cross-compiling).

use_goma = false #Default = false
#    //build/toolchain/goma.gni:12
#    Set to true to enable distributed compilation using Goma.

use_icu_alternatives_on_android = false #Default = false
#    //url/config.gni:7
#    Switches to using platform functions instead of ICU on Android.

use_libjpeg_turbo = true #Default = true
#    //third_party/BUILD.gn:15
#    Uses libjpeg_turbo as the jpeg implementation. Has no effect if
#    use_system_libjpeg is set.

#TODO: set to true(default) if something GPU related doesn't work
use_libpci = false #Default = true
#    //gpu/config/BUILD.gn:9
#    Use the PCI lib to collect GPU information on Linux.

use_official_google_api_keys = false #Default = ""
#    //google_apis/BUILD.gn:30
#    You can set the variable 'use_official_google_api_keys' to true
#    to use the Google-internal file containing official API keys
#    for Google Chrome even in a developer build.  Setting this
#    variable explicitly to true will cause your build to fail if the
#    internal file is missing.
   
#    The variable is documented here, but not handled in this file;
#    see //google_apis/determine_use_official_keys.gypi for the
#    implementation.
   
#    Set the variable to false to not use the internal file, even when
#    it exists in your checkout.
   
#XXX:    Leave it unset or set to "" to have the variable
#    implicitly set to true if you have
#    src/google_apis/internal/google_chrome_api_keys.h in your
#    checkout, and implicitly set to false if not.
   
#    Note that official builds always behave as if the variable
#    was explicitly set to true, i.e. they always use official keys,
#    and will fail to build if the internal file is missing.

use_openssl = false #Default = false
#    //build/config/crypto.gni:14
#    Use OpenSSL instead of NSS. This is used for Android, Mac, NaCl untrusted
#    code, and Windows, and is experimental in other cases (see
#    http://crbug.com/62803).

use_ozone = false #Default = false
#    //build/config/ui.gni:21
#    Indicates if Ozone is enabled. Ozone is a low-level library layer for Linux
#    that does not require X11.

use_pulseaudio = true #Default = true
#    //media/media_options.gni:40

use_system_harfbuzz = true #Default = true
#    //third_party/harfbuzz-ng/BUILD.gn:22
#    Since version 1.31.0, pangoft2 which we depend on pulls in harfbuzz
#    anyways. However, we want to have control of the version of harfbuzz
#    we use, so don't use system harfbuzz for official builds, unless we
#    are building for chrome os, where we have the system harfbuzz under
#    control as well. We also do not want to use the system harfbuzz
#    when cross-compiling for ARM.

use_system_libjpeg = false #Default = false
#    //third_party/BUILD.gn:11
#    Uses system libjpeg. If true, overrides use_libjpeg_turbo.

use_system_libsrtp = false #Default = false
#    //third_party/libsrtp/BUILD.gn:6

use_v4l2_codec = false #Default = false
#    //content/common/common.gni:21
#    Indicates if Video4Linux2 codec is used. This is used for all CrOS
#    platforms which have v4l2 hardware encoder / decoder.

use_v4lplugin = false #Default = false
#    //content/common/common.gni:17
#    Indicates if V4L plugin is used.

